gg.setVisible(false)
gg.clearResults()

local SAVE_FILE = gg.EXT_STORAGE .. "/saved_id.txt"

-- Function to read saved ID from file
local function readSavedID()
  local f = io.open(SAVE_FILE, "r")
  if not f then return nil end
  local line = f:read("*l")
  f:close()
  return tonumber(line)
end

-- Function to save ID to file
local function saveID(id)
  local f = io.open(SAVE_FILE, "w")
  if f then
    f:write(tostring(id))
    f:close()
  end
end

-- Function to request user ID
local function requestUserID()
  while true do
    local input = gg.prompt(
      {"Enter User ID:", "Exit program if cancel?"},
      {nil, false},           -- Default values
      {"number", "checkbox"}  -- Input types
    )

    if input then
      if input[1] then
        saveID(input[1])      -- Save ID
        return input[1]       -- Return valid ID
      end
    else
      -- User closed the prompt: hide GG and wait until they reopen
      while not gg.isVisible() do
        gg.sleep(100)
      end
    end
  end
end

-- Check for existing ID
local userID = readSavedID()
if not userID then
  userID = requestUserID()
else
  local choice = gg.choice(
    { "Use registered ID", "Enter a new ID" },
    nil,
    "Select an option:"
  )
  if choice == 2 then
    userID = requestUserID()
  end
end

-- Function to fetch team data from API
local function getTeamData(id)
  local url = "https://dragoncitytips.com/scripts/checkteam?id=" .. id
  local http = gg.makeRequest(url)
  if not http or not http.content then
    gg.alert("Failed to retrieve data from API.")
    return nil
  end

  -- Fix "<br>" being inserted
  local content = http.content:gsub("<br>", "\n")
  local lines = {}
  for line in content:gmatch("[^\r\n]+") do
    table.insert(lines, line)
  end
  if #lines < 5 then return nil end

  return {
    dragonCode        = lines[1],
    firstDragonLevel  = tonumber(lines[2]) or 1,
    firstDragonGrade  = tonumber(lines[3]) or 1,
    secondDragonLevel = tonumber(lines[4]) or 1,
    secondDragonGrade = tonumber(lines[5]) or 1
  }
end

-- Always request API with the chosen ID
local teamData = getTeamData(userID)
if not teamData then return end

local selectedCode = teamData.dragonCode
local datos        = {teamData.firstDragonLevel,  teamData.firstDragonGrade}
local data         = {teamData.secondDragonLevel, teamData.secondDragonGrade}

gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_ANONYMOUS)
gg.searchNumber(
  selectedCode .. ";" .. datos[1] .. ";" .. datos[2] .. ";" ..
  data[1] .. ";" .. data[2] .. "::500",
  gg.TYPE_DWORD
)
gg.refineNumber(
  selectedCode .. ";" .. datos[1] .. ";" .. datos[2] .. ";" .. data[1] .. "::250",
  gg.TYPE_DWORD
)
gg.refineNumber(
  selectedCode .. ";" .. datos[1] .. ";" .. datos[2] .. "::125",
  gg.TYPE_DWORD
)
gg.refineNumber(
  selectedCode .. ";" .. datos[1] .. "::60",
  gg.TYPE_DWORD
)
gg.refineNumber(selectedCode, gg.TYPE_DWORD)

local t = gg.getResults(100)
local valuesToFreeze = {}

for _, v in ipairs(t) do
  gg.setValues({
    {address = v.address + 0x0,  flags = gg.TYPE_DWORD, value = 1011},
    {address = v.address + 0x4,  flags = gg.TYPE_DWORD, value = 1},
    {address = v.address + 0x8,  flags = gg.TYPE_DWORD, value = 0},
    {address = v.address + 0x24, flags = gg.TYPE_DWORD, value = 0},
    {address = v.address + 0x60, flags = gg.TYPE_DWORD, value = 1011},
    {address = v.address + 0x64, flags = gg.TYPE_DWORD, value = 1},
    {address = v.address + 0x68, flags = gg.TYPE_DWORD, value = 0},
    {address = v.address + 0x84, flags = gg.TYPE_DWORD, value = 0},
    {address = v.address + 0xC0, flags = gg.TYPE_DWORD, value = 1011},
    {address = v.address + 0xC4, flags = gg.TYPE_DWORD, value = 1},
    {address = v.address + 0xC8, flags = gg.TYPE_DWORD, value = 0},
    {address = v.address + 0xE4, flags = gg.TYPE_DWORD, value = 0},
  })

  -- Queue for freezing
  local offsets = {0x0,0x4,0x8,0x24,0x60,0x64,0x68,0x84,0xC0,0xC4,0xC8,0xE4}
  local values  = {1011,1,0,0,1011,1,0,0,1011,1,0,0}

  for i = 1, #offsets do
    table.insert(valuesToFreeze, {
      address = v.address + offsets[i],
      flags   = gg.TYPE_DWORD,
      value   = values[i],
      freeze  = true
    })
  end
end

if #valuesToFreeze > 0 then
  gg.addListItems(valuesToFreeze)
  gg.toast(string.format("Saved %d values to freeze list!", #valuesToFreeze), true)
else
  gg.alert("No values found to freeze!")
end

gg.toast("Battle Arena modification complete!", true)
gg.sleep(1500)
