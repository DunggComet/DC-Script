--------------------------------------------------
-- Shared Functions and Dragon Data Management --
--------------------------------------------------

local function waitForResume()
  gg.toast("Script paused. Click GG icon to resume", true)
  while not gg.isVisible() do gg.sleep(100) end
  gg.setVisible(false)
end

local function safePromptSearch(prompts, defaults, types)
  local input = gg.prompt(prompts, defaults, types)
  if input == nil then
    gg.toast("Returning to main menu...", true)
    waitForResume()
    return nil
  end
  return input
end

local function safeChoiceSearch(items, default, title)
  local choice = gg.choice(items, default, title)
  if choice == nil then
    gg.toast("Returning to main menu...", true)
    waitForResume()
    return nil
  end
  return choice
end

local function safePromptLoop(prompts, defaults, types)
  local input = gg.prompt(prompts, defaults, types)
  while input == nil do
    gg.toast("Script paused. Click GG icon to resume", true)
    waitForResume()
    input = gg.prompt(prompts, defaults, types)
  end
  return input
end

local function fetchDragonData()
  local response = gg.makeRequest("https://dragoncitytips.com/thien")
  if not response or not response.content then
    gg.alert("Failed to download dragon data!")
    return nil
  end

  local data = {}
  for match in response.content:gmatch("<td>(.-)</td>") do
    local cleaned = match:gsub("<[^>]+>", ""):gsub("-", ""):gsub("^%s+", ""):gsub("%s+$", "")
    if cleaned:match("^%d") then
      local code, name = cleaned:match("^(%d+)%s+(.+)$")
      if code and name then
        table.insert(data, {code = code, name = name})
      end
    end
  end
  return #data > 0 and data or nil
end

local globalDragonData = fetchDragonData()

local function getDragonNameFromCode(code)
  if not globalDragonData then return "Undefined Dragon" end
  for _, dragon in ipairs(globalDragonData) do
    if dragon.code == tostring(code) then
      return dragon.name
    end
  end
  return "Undefined Dragon"
end

local function searchDragonCode() ... end
local function searchDragonCodeLoop() ... end
local function searchDragonCodeLooop() ... end
local function searchDragonCodeLoooop() ... end
local function searchDragonCodeLooooop() ... end

local function getTeamData(id)
  local url = "https://dragoncitytips.com/scripts/checkteam?id=" .. id
  local http = gg.makeRequest(url)
  if not http or not http.content then
    gg.alert("Không thể lấy dữ liệu từ API!")
    return nil
  end

  local content = http.content:gsub("\r\n", "\n")
  local lines = {}
  for line in content:gmatch("[^\n]+") do
    table.insert(lines, line)
  end
  if #lines < 5 then
    gg.alert("Dữ liệu không hợp lệ!")
    return nil
  end
  return {
    dragonCode = lines[1],
    firstDragonLevel = tonumber(lines[2]) or 1,
    firstDragonGrade = tonumber(lines[3]) or 1,
    secondDragonLevel= tonumber(lines[4]) or 1,
    secondDragonGrade= tonumber(lines[5]) or 1
  }
end

local backupRankUpValues = {}
local rankUpBaseAddresses = {}

local function revertAllRankUp()
  if next(backupRankUpValues) == nil then
    gg.alert("No backed-up values to revert.")
    return
  end

  local restoredCount = 0
  for addr, entry in pairs(backupRankUpValues) do
    gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_ANONYMOUS)
    gg.setValues({{ address = addr, flags = entry.flags, value = entry.value }})
    restoredCount = restoredCount + 1
    backupRankUpValues[addr] = nil
  end
  gg.toast(string.format("Reverted %d values to original.", restoredCount), true)
  rankUpBaseAddresses = {}
end

local function featureChangeFinalDragon()
  if #rankUpBaseAddresses == 0 then
    gg.alert("No prior Quest Mod (RankUp) run found. Run it first.")
    return
  end

  local newCodeStr = searchDragonCode()
  if not newCodeStr then gg.alert("No dragon selected. Aborting.") return end

  local newCode = tonumber(newCodeStr)
  if not newCode then gg.alert("Invalid code from searchDragonCode.") return end

  local savedCount = 0
  local toSave = {}

  for _, baseAddr in ipairs(rankUpBaseAddresses) do
    local targetAddr = baseAddr + 0xA0
    gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_ANONYMOUS)
    gg.setValues({{address = targetAddr, flags = gg.TYPE_DWORD, value = newCode}})
    local curr = gg.getValues({{address = targetAddr, flags = gg.TYPE_DWORD}})
    if curr and curr[1] then
      table.insert(toSave, { address = targetAddr, flags = gg.TYPE_DWORD, value = curr[1].value })
      savedCount = savedCount + 1
    end
  end

  if #toSave > 0 then
    gg.addListItems(toSave)
    gg.toast(string.format("Updated and saved %d finalDragonCode entries.", savedCount), true)
  else
    gg.alert("Failed to update finalDragonCode values.")
  end
end
