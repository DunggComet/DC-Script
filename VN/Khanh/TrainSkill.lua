```lua
-- TestSkillMod.lua
-- T·ªáp n√†y ch·ªâ ch·ª©a c√°c t√≠nh nƒÉng Test/Skill Mod v√† c√°c ph·ª• thu·ªôc t·ªëi thi·ªÉu.
gg.setVisible(false)
--------------------------------------------------
-- C√°c H√†m H·ªó Tr·ª£ Chung & Qu·∫£n L√Ω D·ªØ Li·ªáu R·ªìng
--------------------------------------------------
local function waitForResume()
  gg.toast("T·∫°m d·ª´ng k·ªãch b·∫£n. Nh·∫•n bi·ªÉu t∆∞·ª£ng GG ƒë·ªÉ ti·∫øp t·ª•c", true)
  while not gg.isVisible() do
    gg.sleep(100)
  end
  gg.setVisible(false)
end

local function safePromptSearch(prompts, defaults, types)
  local input = gg.prompt(prompts, defaults, types)
  while not input do
    gg.toast("T·∫°m d·ª´ng k·ªãch b·∫£n. Nh·∫•n bi·ªÉu t∆∞·ª£ng GG ƒë·ªÉ ti·∫øp t·ª•c.", true)
    waitForResume()
    -- ƒê·ª£i cho ƒë·∫øn khi GG kh√¥ng c√≤n hi·ªÉn th·ªã tr∆∞·ªõc khi y√™u c·∫ßu l·∫°i.
    while gg.isVisible() do
      gg.sleep(100)
    end
    gg.sleep(1000)  -- ƒê·ªô tr·ªÖ b·ªï sung c√≥ th·ªÉ gi√∫p ƒë·∫∑t l·∫°i tr·∫°ng th√°i y√™u c·∫ßu.
    input = gg.prompt(prompts, defaults, types)
  end
  return input
end

local function safeChoiceSearch(items, default, title)
  local choice = gg.choice(items, default, title)
  if choice == nil then
    gg.toast("Quay l·∫°i menu ch√≠nh...", true)
    waitForResume()
    return nil
  end
  return choice
end

local function safePromptLoop(prompts, defaults, types)
  local input = gg.prompt(prompts, defaults, types)
  while input == nil do
    gg.toast("T·∫°m d·ª´ng k·ªãch b·∫£n. Nh·∫•n bi·ªÉu t∆∞·ª£ng GG ƒë·ªÉ ti·∫øp t·ª•c", true)
    waitForResume()
    input = gg.prompt(prompts, defaults, types)
  end
  return input
end

local function fetchDragonData()
  local response = gg.makeRequest("https://dunggcomet.github.io/DC-Script/Website/Dragon")
  if not response or not response.content then
    gg.alert("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu r·ªìng!")
    return nil
  end
  local data = {}
  for match in response.content:gmatch("<div class='dragon%-item'>(.-)</div>") do
    local cleaned = match:gsub("<[^>]+>", ""):gsub("-", ""):gsub("^%s+", ""):gsub("%s+$", "")
    if cleaned:match("^%d") then
      local code, name = cleaned:match("^(%d+)%s+(.+)$")
      if code and name then
        table.insert(data, {code = code, name = name})
      end
    end
  end
  return #data > 0 and data or nil
end

local globalDragonData = fetchDragonData()

local function getDragonNameFromCode(code)
  if not globalDragonData then return "R·ªìng Kh√¥ng X√°c ƒê·ªãnh" end
  for _, dragon in ipairs(globalDragonData) do
    if dragon.code == tostring(code) then
      return dragon.name
    end
  end
  return "R·ªìng Kh√¥ng X√°c ƒê·ªãnh"
end

local function searchDragonCode()
  if not globalDragonData then
    globalDragonData = fetchDragonData()
    if not globalDragonData then return nil end
  end

  local input = safePromptSearch({"Nh·∫≠p t√™n r·ªìng:"}, {""}, {"text"})
  if input == nil then return nil end
  
  local searchTerm = input[1]:lower()
  local matches, codes = {}, {}
  for _, dragon in ipairs(globalDragonData) do
    if dragon.name:lower():find(searchTerm, 1, true) then
      table.insert(matches, "üìã " .. dragon.code .. " - " .. dragon.name)
      table.insert(codes, dragon.code)
    end
  end
  
  if #matches == 0 then
    gg.alert("Kh√¥ng t√¨m th·∫•y r·ªìng n√†o cho: " .. searchTerm)
    return nil
  end
  
  local choice = nil
  repeat
    choice = gg.choice(matches, nil, "Ch·ªçn R·ªìng")
    if choice == nil then
      gg.toast("T·∫°m d·ª´ng l·ª±a ch·ªçn. Nh·∫•n bi·ªÉu t∆∞·ª£ng GG ƒë·ªÉ ti·∫øp t·ª•c.", true)
      waitForResume()
    end
  until choice ~= nil
  
  return codes[choice]
end

local function searchDragonCodeLoop()
  if not globalDragonData then
    globalDragonData = fetchDragonData()
    if not globalDragonData then return nil end
  end

  local input = safePromptLoop({"Nh·∫≠p t√™n r·ªìng:"}, {""}, {"text"})
  local searchTerm = input[1]:lower()
  local matches, codes = {}, {}
  for _, dragon in ipairs(globalDragonData) do
    if dragon.name:lower():find(searchTerm, 1, true) then
      table.insert(matches, "üìã " .. dragon.code .. " - " .. dragon.name)
      table.insert(codes, dragon.code)
    end
  end

  if #matches == 0 then
    gg.alert("Kh√¥ng t√¨m th·∫•y r·ªìng n√†o cho: " .. searchTerm)
    return nil
  end

  local choice = nil
  repeat
    choice = gg.choice(matches, nil, "Ch·ªçn R·ªìng")
    if choice == nil then
      gg.toast("T·∫°m d·ª´ng l·ª±a ch·ªçn. Nh·∫•n bi·ªÉu t∆∞·ª£ng GG ƒë·ªÉ ti·∫øp t·ª•c.", true)
      waitForResume()
    end
  until choice ~= nil

  return codes[choice]
end

--------------------------------------------------
-- C√°c H√†m v√† Bi·∫øn c·ªßa Test/Skill Mod
--------------------------------------------------
local copiedAllValues = {}  
local copiedValues = {}
local validResultsTest = {}
local originalCodeTest = nil
local changedCodeTest  = nil
local baseAddress = nil
-- B·∫£ng sao l∆∞u ƒë·ªÉ l∆∞u tr·ªØ c√°c gi√° tr·ªã g·ªëc tr∆∞·ªõc khi d√°n.
local backupPastedValuesTest = {}

local function processMemorySearchTest(selectedCode)
  gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_ANONYMOUS)
  gg.searchNumber(selectedCode..";0;-1::150", gg.TYPE_DWORD)
  gg.refineNumber(selectedCode..";0::15", gg.TYPE_DWORD)
  gg.refineNumber(selectedCode, gg.TYPE_DWORD)
  local results = gg.getResults(100)
  validResultsTest = {}
  for _, v in ipairs(results) do
    local offsets = {}
    for i = 1, 15 do
      offsets[i] = gg.getValues({{address = v.address + (i * 4), flags = gg.TYPE_DWORD}})[1].value
    end
    if offsets[1] ~= -1 and offsets[1] ~= 0 and
       offsets[2] ~= -1 and
       offsets[3] ~= -1 and offsets[3] ~= 0 and
       offsets[4] ~= -1 and offsets[4] ~= 0 and
       offsets[5] ~= -1 and offsets[5] ~= 0 and
       offsets[6] ~= -1 and offsets[6] ~= 0 and
       offsets[7] ~= 0 and offsets[7] ~= -1 and
       offsets[8] ~= 0 and
       offsets[9] ~= -1 and offsets[9] ~= 0 and
       offsets[10] ~= -1 and offsets[10] ~= 0 and
       offsets[11] ~= -1 and offsets[11] ~= 0 and
       offsets[12] ~= -1 and offsets[12] ~= 0 and
       offsets[13] ~= -1 and offsets[13] ~= 0 and
       offsets[14] ~= -1 and offsets[14] ~= 0 and
       offsets[15] ~= -1 and offsets[15] ~= 0 and offsets[15] ~= 8 then
      table.insert(validResultsTest, v)
    end
  end
  if #validResultsTest > 0 then
    baseAddress = validResultsTest[1].address
    if #validResultsTest == 1 then
      local single = validResultsTest[1]
      single.name = single.value .. " - " .. getDragonNameFromCode(single.value)
      gg.addListItems(validResultsTest)
    elseif #validResultsTest > 1 and #validResultsTest < 109 then
      for i, v in ipairs(validResultsTest) do
        v.value = 1038 + i
        v.name = v.value .. " - " .. getDragonNameFromCode(v.value)
      end
      gg.setValues(validResultsTest)
      gg.addListItems(validResultsTest)
    elseif #validResultsTest > 108 then
      for _, v in ipairs(validResultsTest) do
        v.value = 1011
        v.name = v.value .. " - " .. getDragonNameFromCode(v.value)
      end
      gg.setValues(validResultsTest)
      gg.addListItems(validResultsTest)
    end
    return true
  end
  return false
end

local function copyOffsetTest()
  local srcChoice = nil
  repeat
    srcChoice = gg.choice({
      'T·ª´ k·ªπ nƒÉng/t·∫•n c√¥ng th·ª© 1 (C∆° b·∫£n)', 'T·ª´ k·ªπ nƒÉng/t·∫•n c√¥ng th·ª© 2 (C∆° b·∫£n)',
      'T·ª´ k·ªπ nƒÉng/t·∫•n c√¥ng th·ª© 3 (C∆° b·∫£n)', 'T·ª´ k·ªπ nƒÉng/t·∫•n c√¥ng th·ª© 4 (C∆° b·∫£n)',
      'T·ª´ k·ªπ nƒÉng/t·∫•n c√¥ng th·ª© 1 (Trung t√¢m hu·∫•n luy·ªán)', 'T·ª´ k·ªπ nƒÉng/t·∫•n c√¥ng th·ª© 2 (Trung t√¢m hu·∫•n luy·ªán)',
      'T·ª´ k·ªπ nƒÉng/t·∫•n c√¥ng th·ª© 3 (Trung t√¢m hu·∫•n luy·ªán)', 'T·ª´ k·ªπ nƒÉng/t·∫•n c√¥ng th·ª© 4 (Trung t√¢m hu·∫•n luy·ªán)',
      'Quay l·∫°i'
    }, nil, "Sao ch√©p 1 K·ªπ nƒÉng/T·∫•n c√¥ng t·ª´ T·∫§T C·∫¢ K·∫øt qu·∫£")
    if srcChoice == nil then
      gg.toast("T·∫°m d·ª´ng. Nh·∫•n bi·ªÉu t∆∞·ª£ng GG ƒë·ªÉ ti·∫øp t·ª•c.", true)
      waitForResume()
    end
  until srcChoice ~= nil
  if srcChoice > 8 then return end
  local srcOffset = ({0x20, 0x24, 0x28, 0x2C, 0x30, 0x34, 0x38, 0x3C})[srcChoice]
  copiedValues = {}
  for _, result in ipairs(validResultsTest) do
    local addr = result.address + srcOffset
    local val = gg.getValues({{address = addr, flags = gg.TYPE_DWORD}})[1].value
    copiedValues[result.address] = val
  end
end

local function copyAllOffsetTest()
  if not validResultsTest or #validResultsTest == 0 then
    gg.alert("‚ùó Kh√¥ng c√≥ k·∫øt qu·∫£ h·ª£p l·ªá ƒë·ªÉ sao ch√©p!")
    return
  end
  copiedAllValues = {}
  local offs = {0x30, 0x34, 0x38, 0x3C}
  for _, result in ipairs(validResultsTest) do
    local addr = result.address
    local vals = {}
    for _, off in ipairs(offs) do
      vals[off] = gg.getValues({{ address = addr + off, flags = gg.TYPE_DWORD }})[1].value
    end
    copiedAllValues[addr] = vals
  end
end

local function pasteOffsetTest()
  if not next(copiedValues) then
    gg.alert("‚ùó Kh√¥ng c√≥ gi√° tr·ªã ƒë√£ sao ch√©p! H√£y sao ch√©p tr∆∞·ªõc.")
    return
  end
  local targets = {0x20, 0x24, 0x28, 0x2C}
  for _, result in ipairs(validResultsTest) do
    for _, offset in ipairs(targets) do
      local addr = result.address + offset
      if backupPastedValuesTest[addr] == nil then
         local origVal = gg.getValues({{address = addr, flags = gg.TYPE_DWORD}})[1].value
         backupPastedValuesTest[addr] = origVal
      end
      gg.setValues({{address = addr, flags = gg.TYPE_DWORD, value = copiedValues[result.address]}})
    end
  end
end

local function pasteAllOffsetTest()
  if not copiedAllValues or next(copiedAllValues) == nil then
    gg.alert("‚ùó Kh√¥ng c√≥ gi√° tr·ªã sao ch√©p h√†ng lo·∫°t ƒë·ªÉ d√°n!")
    return
  end
  local mapping = {
    {src=0x30, dst=0x20},
    {src=0x34, dst=0x24},
    {src=0x38, dst=0x28},
    {src=0x3C, dst=0x2C},
  }
  for baseAddr, vals in pairs(copiedAllValues) do
    local ops = {}
    for _, m in ipairs(mapping) do
      table.insert(ops, {
        address = baseAddr + m.dst,
        flags   = gg.TYPE_DWORD,
        value   = vals[m.src]
      })
    end
    gg.setValues(ops)
  end
end

local function revertPastedValuesTest()
   if not next(backupPastedValuesTest) then
      gg.alert("Kh√¥ng c√≥ gi√° tr·ªã ƒë√£ d√°n ƒë·ªÉ kh√¥i ph·ª•c!")
      return
   end
   local revertItems = {}
   for addr, origVal in pairs(backupPastedValuesTest) do
       table.insert(revertItems, {address = addr, flags = gg.TYPE_DWORD, value = origVal})
   end
   gg.setValues(revertItems)
   backupPastedValuesTest = {}  -- X√≥a sao l∆∞u sau khi kh√¥i ph·ª•c
   gg.toast("ƒê√£ kh√¥i ph·ª•c c√°c gi√° tr·ªã ƒë√£ d√°n")
end

local function testSkillMenu()
  while true do
    local menuItems = {
      "üîÑ Thay ƒê·ªïi M√£ R·ªìng",
      "üìã Sao Ch√©p M·ªôt K·ªπ NƒÉng/T·∫•n C√¥ng",
      "üìö Sao Ch√©p T·∫•t C·∫£ K·ªπ NƒÉng/T·∫•n C√¥ng",
      "üé® √Åp D·ª•ng Cho T·∫•t C·∫£ T·∫•n C√¥ng (Mod: M·ªôt Th√†nh B·ªën)",
      "üåê √Åp D·ª•ng Cho T·∫•t C·∫£ T·∫•n C√¥ng (Mod: B·ªën Th√†nh B·ªën)",
      "üîÑ Kh√¥i Ph·ª•c Gi√° Tr·ªã ƒê√£ D√°n",
      "üîç T√¨m Ki·∫øm M·ªõi",
      "‚èÆ Kh√¥i Ph·ª•c R·ªìng G·ªëc",
      "‚è≠ Kh√¥i Ph·ª•c R·ªìng ƒê√£ S·ª≠a ƒê·ªïi",
      "üëã Tho√°t Test Skill"
    }
    local choice = safeChoiceSearch(menuItems, nil,
      string.format("C∆° b·∫£n: 0x%X | Hi·ªán t·∫°i: %s", baseAddress, getDragonNameFromCode(originalCodeTest))
    )
    if choice == 1 then
      local newCode = searchDragonCode()
      if newCode then
        changedCodeTest = newCode
        for _, v in ipairs(validResultsTest) do
          v.value = tonumber(newCode)
          v.name = newCode.." - "..getDragonNameFromCode(newCode)
        end
        gg.setValues(validResultsTest)
        gg.addListItems(validResultsTest)
        gg.toast("ƒê√£ thay ƒë·ªïi th√†nh: "..getDragonNameFromCode(newCode))
      end
    elseif choice == 2 then
      copyOffsetTest()
    elseif choice == 3 then
      copyAllOffsetTest()
    elseif choice == 4 then
      pasteOffsetTest()
    elseif choice == 5 then
      pasteAllOffsetTest()
    elseif choice == 6 then
      revertPastedValuesTest()
    elseif choice == 7 then
      gg.clearResults()
      return true  -- T√¨m ki·∫øm m·ªõi: quay l·∫°i ƒë·ªÉ ch·∫°y l·∫°i t√¨m ki·∫øm test skill
    elseif choice == 8 then
      for _, v in ipairs(validResultsTest) do
        v.value = tonumber(originalCodeTest)
        v.name = originalCodeTest.." - "..getDragonNameFromCode(originalCodeTest)
      end
      gg.setValues(validResultsTest)
      gg.addListItems(validResultsTest)
      gg.toast("ƒê√£ kh√¥i ph·ª•c v·ªÅ r·ªìng g·ªëc")
    elseif choice == 9 then
      if changedCodeTest then
        for _, v in ipairs(validResultsTest) do
          v.value = tonumber(changedCodeTest)
          v.name  = changedCodeTest.." - "..getDragonNameFromCode(changedCodeTest)
        end
        gg.setValues(validResultsTest)
        gg.addListItems(validResultsTest)
        gg.toast("ƒê√£ kh√¥i ph·ª•c v·ªÅ r·ªìng ƒë√£ s·ª≠a ƒë·ªïi")
      else
        gg.alert("Kh√¥ng c√≥ m√£ ƒë√£ thay ƒë·ªïi ƒë·ªÉ kh√¥i ph·ª•c!")
      end
    elseif choice == 10 then
      gg.clearResults()
      gg.toast("Quay l·∫°i menu ch√≠nh...")
      return false
    end
  end
end

local function pickTestSkillResult()
  local choices = {}
  for i, v in ipairs(validResultsTest) do
    table.insert(choices, v.name)
  end

  local chosenIndex = nil
  repeat
    chosenIndex = gg.choice(choices, nil, "Ch·ªçn m·ªôt m·ª•c r·ªìng (ch·ªâ gi·ªØ l·∫°i m·ªôt m·ª•c).")
    if chosenIndex == nil then
      gg.toast("T·∫°m d·ª´ng l·ª±a ch·ªçn. Nh·∫•n bi·ªÉu t∆∞·ª£ng GG ƒë·ªÉ ti·∫øp t·ª•c.", true)
      waitForResume()
    end
  until chosenIndex ~= nil

  -- Kh√¥i ph·ª•c gi√° tr·ªã cho t·∫•t c·∫£ c√°c m·ª•c, bao g·ªìm c·∫£ m·ª•c ƒë√£ ch·ªçn.
  for i, v in ipairs(validResultsTest) do
    gg.setValues({{address = v.address, flags = gg.TYPE_DWORD, value = tonumber(originalCodeTest)}})
    v.value = tonumber(originalCodeTest)
  end

  local chosenItem = validResultsTest[chosenIndex]
  validResultsTest = { chosenItem }
  -- ch·ªâ gi·ªØ c√°c m·ª•c c√≥ gi√° tr·ªã l√† 1011 ho·∫∑c 0; x√≥a t·∫•t c·∫£ c√°c m·ª•c kh√°c
  do
    local allItems = gg.getListItems()
    local toRemove = {}
    for _, item in ipairs(allItems) do
      if item.value ~= 1011 and item.value ~= 1 and item.value ~= 0 then
        table.insert(toRemove, item)
      end
    end
    if #toRemove > 0 then
      gg.removeListItems(toRemove)
    end
  end

  gg.addListItems(validResultsTest)
  gg.toast("ƒê√£ ch·ªçn v√† kh√¥i ph·ª•c: " .. chosenItem.name)
  return chosenItem
end

-- H√†m testSkill ƒë√£ s·ª≠a ƒë·ªïi t√≠ch h·ª£p pickTestSkillResult.
local function testSkill()
  if not globalDragonData then
    globalDragonData = fetchDragonData()
    if not globalDragonData then
      gg.alert("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu r·ªìng")
      return
    end
  end
  while true do
    validResultsTest = {}
    originalCodeTest = searchDragonCode()
    if not originalCodeTest then break end
    if processMemorySearchTest(originalCodeTest) then
      local chosen = pickTestSkillResult()
      if not chosen then break end  -- N·∫øu kh√¥ng ch·ªçn, tho√°t v·ªÅ menu ch√≠nh.
      local needRestart = testSkillMenu()
      if not needRestart then break end
    else
      gg.alert("Kh√¥ng t√¨m th·∫•y b·ªô nh·ªõ h·ª£p l·ªá")
    end
  end
  do
    local allItems = gg.getListItems()
    local toRemove = {}
    for _, item in ipairs(allItems) do
      if item.value ~= 1011 and item.value ~= 1 and item.value ~= 0 then
        table.insert(toRemove, item)
      end
    end
    if #toRemove > 0 then
      gg.removeListItems(toRemove)
    end
  end

  gg.toast("Quay l·∫°i menu ch√≠nh...", true)
  gg.sleep(1500)
end
--------------------------------------------------
-- Ch·∫°y Test Skill Mod
--------------------------------------------------
testSkill()
```
